;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define del_coef 0.5
;
;long int one_m = 1000000 ;

	.DSEG
;long int freq_hz ;
;long int icr_pre_val ;
;int icr_val ;
;char i = 0 ;
;
;unsigned int notes[] = {264,264,297,264,352,330,264,264,297,264,396,352,264,264,264,440,352,352,330,297,466,466,440,352, ...
;unsigned int lengths[] = {250,250,1000,1000,1000,2000,250,250,1000,1000,1000,2000,250,250,1000,1000,500,250,1000,2000,25 ...
;unsigned int delays[] = {500,250,250,250,250,500,500,250,250,250,250,500,500,250,250,250,250,250,250,500,500,250,250,250 ...
;
;void freq_cal();
;
;void main(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0014 // Port D initialization
; 0000 0015 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0016 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0017 // State: Bit7=P Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0018 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019 
; 0000 001A 
; 0000 001B // Timer/Counter 1 initialization
; 0000 001C // Clock source: System Clock
; 0000 001D // Clock value: 1000.000 kHz
; 0000 001E // Mode: Fast PWM top=ICR1
; 0000 001F // OC1A output: Non-Inverted PWM
; 0000 0020 // OC1B output: Disconnected
; 0000 0021 // Noise Canceler: Off
; 0000 0022 // Input Capture on Falling Edge
; 0000 0023 // Timer Period: 1 us
; 0000 0024 // Output Pulse(s):
; 0000 0025 // OC1A Period: 1 us
; 0000 0026 // Timer1 Overflow Interrupt: Off
; 0000 0027 // Input Capture Interrupt: Off
; 0000 0028 // Compare A Match Interrupt: Off
; 0000 0029 // Compare B Match Interrupt: Off
; 0000 002A TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002C TCNT1H=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002D TCNT1L=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002E ICR1H=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002F ICR1L=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0030 OCR1AH=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0031 OCR1AL=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0032 OCR1BH=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033 OCR1BL=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0034 
; 0000 0035 while (1)
;PCODE: $00000026 VOL: 0
; 0000 0036     {
; 0000 0037 
; 0000 0038     freq_hz = notes[i] ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0039     freq_cal();
;PCODE: $0000002F VOL: 0
; 0000 003A     delay_ms(lengths[i]*del_coef);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003B     freq_hz = 50000 ;  //voice with no sound
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003C     freq_cal();
;PCODE: $0000003E VOL: 0
; 0000 003D     delay_ms(delays[i]*del_coef);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003E 
; 0000 003F     i++;
;PCODE: $0000004B VOL: 0
; 0000 0040     if(i==26)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0041         {
; 0000 0042         freq_hz = 50000 ;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0043         freq_cal();
;PCODE: $00000051 VOL: 0
; 0000 0044         i=0;
;PCODE: $00000052 VOL: 0
; 0000 0045         delay_ms(3000);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0046         }
; 0000 0047 
; 0000 0048     }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0049 
; 0000 004A }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;
;void freq_cal()
; 0000 004E     {//ctc
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004F         icr_pre_val = one_m / freq_hz ; //top
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0050         icr_val = icr_pre_val ;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0051         ICR1H= ( icr_val >> 8 );  //shift high value and save
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0052         ICR1L= ( icr_val & 0xFF );
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0053         icr_val = icr_val / 2 ;//pwm
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0054         OCR1AH = ( icr_val >> 8 );
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0055         OCR1AL = ( icr_val & 0xFF );
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0056     }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
